default_compiler: nvcc
default_standard: c++17

# TODO: detect whether nvcc exists (on non nvcc systems)
# TODO: simpler, more pythonic language for this

definitions:
  - kobra_source: 'source/app.cpp,
    source/backend.cpp,
    source/bvh.cpp,
    source/capture.cpp,
    source/ecs.cpp,
    source/extensions.cpp,
    source/formats.cpp,
    source/io/event.cpp,
    source/layers/gizmo.cpp,
    source/layers/hybrid_tracer.cu,
    source/layers/wadjet.cu,
    source/layers/objectifier.cpp,
    source/layers/optix_tracer.cu,
    source/layers/raster.cpp,
    source/layers/raytracer.cpp,
    source/logger.cpp,
    source/material.cpp,
    source/mesh.cpp,
    source/renderer.cpp,
    source/scene.cpp,
    source/texture_manager.cpp,
    source/timer.cpp,
    source/vertex.cpp'
  - tinyfd_source: 'thirdparty/tinyfiledialogs/tinyfiledialogs.c'
  - glslang_source: 'thirdparty/glslang/SPIRV/GlslangToSpv.cpp,
    thirdparty/glslang/StandAlone/ResourceLimits.cpp'
  - includes: 'thirdparty,
    thirdparty/freetype/include,
    thirdparty/glm,
    thirdparty/imgui,
    thirdparty/assimp/include,
    thirdparty/tinyfiledialogs,
    thirdparty/optix,
    thirdparty/tinyexr,
    thirdparty/stb,
    /usr/include/opencv4'
  - libs: 'glfw,
    vulkan,
    assimp,
    pthread,
    avcodec,
    avformat,
    avutil,
    freetype,
    glslang,
    SPIRV,
    OSDependent,
    OGLCompiler,
    ffi,
    opencv_core,
    opencv_videoio,
    opencv_imgcodecs,
    opencv_imgproc'

builds:
  - optix_ptx_debug:
    - sources: source/layers/optix_rt.cu
    - idirs: includes
    - flags: '-ptx -g -lineinfo'
    - options: 'nolink, output_dir=./bin/ptx, output_format={filename}.ptx'
  - optix_ptx_release:
    - sources: source/layers/optix_rt.cu
    - idirs: includes
    - flags: '-ptx -O3'
    - options: 'nolink, output_dir=./bin/ptx, output_format={filename}.ptx'
  - hybrid_ptx_release:
    - sources: source/optix/hybrid_rt.cu
    - idirs: includes
    - flags: '-ptx -O3'
    - options: 'nolink, output_dir=./bin/ptx, output_format={filename}.ptx'
  - wadjet_ptx_release:
    - sources: source/optix/wadjet_rt.cu
    - idirs: includes
    - flags: '-ptx -O3'
    - options: 'nolink, output_dir=./bin/ptx, output_format={filename}.ptx'
  - glsl_compute:
    - sources: shaders/rt/progressive_path_tracer.glsl
    - flags: '-fshader-stage=compute'
    - compiler: glslc
    - options: 'nolink, output_dir=./bin/spv'
  - glsl_vertex:
    - sources: 'shaders/postproc/spit.vert,
      shaders/raster/skybox.vert,
      shaders/raster/objectifier.vert,
      shaders/raster/gizmo.vert,
      shaders/raster/hybrid/hybrid_deferred.vert'
    - flags: '-fshader-stage=vertex'
    - compiler: glslc
    - options: 'nolink, output_dir=./bin/spv, output_format={filename}_vert.spv'
  - glsl_frag:
    - sources: 'shaders/postproc/spit.frag,
      shaders/raster/skybox.frag,
      shaders/raster/objectifier.frag,
      shaders/raster/gizmo.frag,
      shaders/raster/hybrid/hybrid_deferred.frag'
    - flags: '-fshader-stage=fragment'
    - compiler: glslc
    - options: 'nolink, output_dir=./bin/spv, output_format={filename}_frag.spv'
  - kobra:
    - sources: main.cpp, kobra_source, tinyfd_source, glslang_source
    - idirs: includes
    - flags: '-std=c++17'
    - libraries: libs
    - dependencies: optix_ptx_debug, glsl_compute, glsl_vertex, glsl_frag
  - kobra_release:
    - sources: main.cpp, kobra_source, tinyfd_source, glslang_source
    - idirs: includes
    - flags: '-O3 -std=c++17'
    - libraries: libs
    - dependencies: optix_ptx_debug, hybrid_ptx_release, wadjet_ptx_release, glsl_compute, glsl_vertex, glsl_frag
  - kobra_debug:
    - sources: main.cpp, kobra_source, tinyfd_source, glslang_source
    - idirs: includes
    - libraries: libs
    - flags: '-g -std=c++17'
    - dependencies: optix_ptx_debug, glsl_compute 
  - kobra_wall:
    - sources: main.cpp, kobra_source, tinyfd_source, glslang_source
    - idirs: includes
    - libraries: libs
    - flags: '-std=c++17 -Wall -Werror'
  - arbok_libs:
    - sources: experimental/std.cpp, source/arbok/value.cpp
    - idirs: includes
    - flags: '-fPIC -Wall -g -std=c++17'
    - options: 'dll, output_dir=./bin/lib, target_name=libarbok.so'
    - compiler: 'clang++'
  - experimental_normal:
    - sources: experimental/main.cpp, source/arbok/value.cpp
    - idirs: includes
    - flags: '-std=c++17 -Xcompiler -fpermissive'
    - libraries: libs
    - dependencies: arbok_libs
    - compiler: 'clang++'
  - experimental_debug:
    - sources: experimental/main.cpp, source/arbok/value.cpp
    - idirs: includes
    - flags: '-std=c++17 -Wall -g -Xcompiler -fpermissive'
    - libraries: libs
    - dependencies: arbok_libs
    - compiler: 'clang++'

targets:
  - kobra:
    - modes: 'gdb, cuda-gdb, wall, release'
    - builds:
      - default: kobra
      - cuda-gdb: kobra_debug
      - gdb: kobra_debug
      - wall: kobra_wall
      - release: kobra_release
    - postbuilds:
      - default: 'cd shaders && ./compile.sh && cd .. && {}'
      - gdb: 'gdb {}'
      - cuda-gdb: 'cuda-gdb {}'
      - wall: '{}'
      - release: '{}'
  - experimental:
    - modes: 'gdb'
    - builds:
      - default: experimental_normal
      - gdb: experimental_debug
    - postbuilds:
      - default: '{}'
      - gdb: 'gdb {}'
