# TODO: try to make this possible
# from .files import *

smake_import('files.py')

kobra = target('kobra')

build_default = kobra.new_build('default')

# TODO: auto set of compilers for c, cpp, cuda, etc
build_default.set_compiler('nvcc')

flags = ['-std=c++17', '-Xcompiler', '-fdiagnostics-color=always']
flags.extend(suppress_nvcc_warnings())

build_default.set_flags(['-O3'] + flags)

build_default.define({
	'MAGICKCORE_QUANTUM_DEPTH': 16,
	'MAGICKCORE_HDRI_ENABLE': 1,
    'KOBRA_DIR': kobra_dir
})

# TODO: require method for dependencies
build_default.add_sources('main.cu',
        kobra_sources,
        glslang_sources,
        imgui_sources,
        implot_sources
)

# TODO: find system
build_default.add_includes(kobra_includes)

# TODO: find header and libraries...
build_default.add_libraries(kobra_libraries)

# TODO: dependencies in another smake file, then
# force smake to delay references
# until after everything has been parsed...

# OptiX dependencies
kobra_ptx = proxy_build('kobra_ptx')
kobra_ptx.set_compiler('nvcc')

kobra_ptx.add_sources(
    'source/optix/basilisk_rt.cu',
    'source/optix/basilisk_restir.cu',
    'source/optix/basilisk_voxel.cu',
    'source/optix/wssr_grid.cu'
)

kobra_ptx.add_includes(kobra_includes)
kobra_ptx.set_flags(flags + ['-g', '-ptx', '--expt-relaxed-constexpr'])
kobra_ptx.config({
    'linking': False,
    'object_format': '${BASENAME}.ptx',
    'object_dir': 'bin/ptx'
})

# GLSL vertex shader dependencies
glsl_vertex = proxy_build('glsl_vertex')
glsl_vertex.set_compiler('glslc')
glsl_vertex.set_flags('-fshader-stage=vertex')

glsl_vertex.add_sources(
    'shaders/postproc/spit.vert',
    'shaders/raster/skybox.vert',
    'shaders/raster/objectifier.vert',
    'shaders/raster/gizmo.vert',
    'shaders/raster/hybrid/hybrid_deferred.vert'
)

glsl_vertex.config({
    'linking': False,
    'object_format': '${BASENAME}_vert.spv',
    'object_dir': 'bin/spv'
})

# GLSL fragment shader dependencies
# TODO: move to another smake config
glsl_frag = proxy_build('glsl_frag')
glsl_frag.set_compiler('glslc')
glsl_frag.set_flags('-fshader-stage=fragment')

glsl_frag.add_sources(
    'shaders/postproc/spit.frag',
    'shaders/raster/skybox.frag',
    'shaders/raster/objectifier.frag',
    'shaders/raster/gizmo.frag',
    'shaders/raster/hybrid/hybrid_deferred.frag'
)

glsl_frag.config({
    'linking': False,
    'object_format': '${BASENAME}_frag.spv',
    'object_dir': 'bin/spv'
})

# Add these dependencies to the builds
build_default.require(
    kobra_ptx,
    glsl_vertex,
    glsl_frag
)

# Debug builds
build_gdb = kobra.new_build('gdb')
build_gdb.copy(build_default)
build_gdb.set_flags(['-g'] + flags)

build_sanitizer = kobra.new_build('sanitizer')
build_sanitizer.copy(build_gdb)

build_sanitizer = kobra.new_build('cuda-memcheck')
build_sanitizer.copy(build_gdb)

# Similar other builds
bench = kobra.new_build('bench')
bench.copy(build_default)

bench.set_sources('bench.cu', kobra_sources, glslang_sources)

# Postbuilds
kobra.set_post_builds(
    '${SMAKE_TARGET}',
    ('bench', '${SMAKE_TARGET}'),
    ('gdb', 'gdb ${SMAKE_TARGET}'),
    ('sanitizer', 'compute-sanitizer --tool=memcheck ${SMAKE_TARGET}'),
    ('cuda-memcheck', 'cuda-memcheck ${SMAKE_TARGET}')
)
